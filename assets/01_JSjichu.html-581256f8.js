import{_ as n,o as s,c as a,e}from"./app-1d23f0b5.js";const t={},o=e(`<h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><p><strong>在 JavaScript 中有 8 种基本的数据类型（7 种原始类型和 1 种复杂类型）</strong></p><ul><li>Number</li><li>String</li><li>Boolean</li><li>Undefined</li><li>Null</li><li>Object</li><li>BigInt</li><li>Symbol</li></ul><h3 id="简单数据类型" tabindex="-1"><a class="header-anchor" href="#简单数据类型" aria-hidden="true">#</a> 简单数据类型</h3><table><thead><tr><th>简单数据类型</th><th style="text-align:left;">说明</th><th>默认值</th></tr></thead><tbody><tr><td>Number</td><td style="text-align:left;">数字型,包含 整数值和浮点值</td><td>0</td></tr><tr><td>Boolean</td><td style="text-align:left;">布尔值,如true,false,等价于1和0</td><td>false</td></tr><tr><td>String</td><td style="text-align:left;">字符串</td><td>&quot;&quot;</td></tr><tr><td>Undefined</td><td style="text-align:left;">声明了变量但未赋值,此时为undefined</td><td>Undefined</td></tr><tr><td>Null</td><td style="text-align:left;">let a = Null;声明a为空值</td><td>Null</td></tr></tbody></table><h4 id="typeof操作符" tabindex="-1"><a class="header-anchor" href="#typeof操作符" aria-hidden="true">#</a> typeof操作符</h4><blockquote><p>用来获取检测变量的数据类型</p></blockquote><p>可能返回的类型字符串有:<code>string</code>, <code>boolean</code>, <code>number</code>, <code>bigint</code>, <code>symbol</code>, <code>undefined</code>, <code>function</code>, <code>object</code>。</p><blockquote><p><code>typeof</code> 的局限性，在于无法精确判断出 <code>null、数组、对象、正则</code> 的类型。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span>

<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">对象</span><span class="token template-punctuation string">\`</span></span>、<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">数组</span><span class="token template-punctuation string">\`</span></span>、<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">null</span><span class="token template-punctuation string">\`</span></span>、<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">正则表达式</span><span class="token template-punctuation string">\`</span></span>，都返回 <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">object</span><span class="token template-punctuation string">\`</span></span>。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组" aria-hidden="true">#</a> 数组</h2><blockquote><p>.length可获取字符串或数组长度</p></blockquote><h3 id="定义方式" tabindex="-1"><a class="header-anchor" href="#定义方式" aria-hidden="true">#</a> 定义方式</h3><ul><li>var arr = [值1,值2,值3] 声明赋值</li><li>var arr = new Array(值1,值2,值3) 直接实例化</li><li>var arr = new Array(8) 创建数组并且指定长度</li></ul><h3 id="遍历方法" tabindex="-1"><a class="header-anchor" href="#遍历方法" aria-hidden="true">#</a> 遍历方法</h3><p><strong>普通for循环遍历：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>for..in 遍历，获取到索引值：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> index <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>for..of 遍历，获取到每一个元素：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="增删改查" tabindex="-1"><a class="header-anchor" href="#增删改查" aria-hidden="true">#</a> 增删改查</h3><p><strong>array.push(element1, element2, ...)</strong></p><p><code>push()</code>方法用于<strong>在数组的末尾添加一个或多个元素</strong>，然后返回新数组的长度。</p><p><strong>array.pop()</strong></p><p><code>pop()</code>方法用于从<strong>数组的末尾删除一个元素</strong>，然后返回被删除的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回 5</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>array.unshift(element1, element2, ...)</strong></p><p><code>unshift()</code>方法用于在数组的头部添加一个或多个元素，然后返回新数组的长度。</p><p><strong>array.shift()</strong></p><p><code>shift()</code>方法用于从数组的头部删除一个元素，然后返回被删除的元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回 5</span>

<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>array.splice(index, howMany, item1, item2, ...)</strong></p><p><code>splice()</code>方法用于在<strong>数组中添加或删除元素</strong>，然后返回被删除的元素。</p><ul><li><code>index</code>：要插入或删除的元素的位置。</li><li><code>howMany</code>：要删除的元素数量。如果未指定此参数，则默认为0。</li><li><code>item1</code>、<code>item2</code>等：要添加到数组中的元素。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回 [2, 3, 4, 5, 6]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>array.indexOf(searchElement)</strong></p><p><code>indexOf()</code>方法用于在<strong>数组中查找指定元素的索引</strong>。如果找到指定元素，则返回该元素的索引；否则返回-1。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 返回 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="高阶方法" tabindex="-1"><a class="header-anchor" href="#高阶方法" aria-hidden="true">#</a> 高阶方法</h3><h4 id="遍历" tabindex="-1"><a class="header-anchor" href="#遍历" aria-hidden="true">#</a> 遍历</h4><p><strong>array.forEach(callback(currentValue, index, array))</strong></p><p><code>forEach()</code>方法用于<strong>遍历数组中的每个元素，并执行指定的回调函数</strong>。回调函数接受三个参数：当前元素值、当前元素索引和整个数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 2, 4, 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>array.map(callback(currentValue, index, array))</strong></p><p><code>map()</code>方法用于创建一个新数组，该数组是<strong>将原数组中的每个元素经过指定的回调函数转换后的结果。</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const arr = [1, 2, 3, 4, 5];
const newArr = arr.map(function(element, index, array) {
 return element * 2;
});
console.log(newArr); // [2, 4, 6, 8, 10]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="筛选" tabindex="-1"><a class="header-anchor" href="#筛选" aria-hidden="true">#</a> 筛选</h4><p><strong>array.filter(callback(currentValue, index, array))</strong></p><p><code>filter()</code>方法用于创建一个新数组，<strong>该数组是将原数组中经过指定的回调函数转换后的结果</strong>。回调函数返回<code>true</code>时，元素才会被保留在新的数组中。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const arr = [1, 2, 3, 4, 5];
const newArr = arr.filter(function(element, index, array) {
 return element &gt; 3;
});
console.log(newArr); // [4, 5]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>array.reduce(callback(accumulator, currentValue, index, array))</strong></p><h4 id="计算" tabindex="-1"><a class="header-anchor" href="#计算" aria-hidden="true">#</a> 计算</h4><p><code>reduce()</code>方法用于<strong>计算数组中所有元素经过指定的回调函数后的结果</strong>。回调函数接受三个参数：累加器（初始值为<code>0</code>）、当前元素值和整个数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">accumulator<span class="token punctuation">,</span> element<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> accumulator <span class="token operator">+</span> element<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转化为字符串" tabindex="-1"><a class="header-anchor" href="#转化为字符串" aria-hidden="true">#</a> 转化为字符串</h3><p><strong>array.join(separator)</strong></p><p><code>join()</code>方法用于<strong>将数组中的所有元素连接成一个字符串</strong>。数组中的每个元素都会被转换为字符串，然后使用指定的分隔符将它们连接起来。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 &quot;Hello world&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><blockquote><p>.length可获取字符串或数组长度</p><p>字符串定义后不可修改</p></blockquote><h3 id="定义方式-1" tabindex="-1"><a class="header-anchor" href="#定义方式-1" aria-hidden="true">#</a> 定义方式</h3><ul><li>可以通过字面量的形式来创建一个字符串</li><li>可以通过new String()来创建一个字符串</li></ul><h3 id="访问字符串的字符" tabindex="-1"><a class="header-anchor" href="#访问字符串的字符" aria-hidden="true">#</a> 访问字符串的字符</h3><ul><li>通过字符串的索引 str[index] , 没有找到会<strong>返回undefined</strong></li><li>通过str.charAt(index)方法 , 没有找到会<strong>返回空字符串</strong></li></ul><h3 id="遍历方法-1" tabindex="-1"><a class="header-anchor" href="#遍历方法-1" aria-hidden="true">#</a> 遍历方法</h3><p><strong>普通for循环遍历：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>for..of遍历：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">of</span> str<span class="token punctuation">)</span><span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="字符串大小写" tabindex="-1"><a class="header-anchor" href="#字符串大小写" aria-hidden="true">#</a> 字符串大小写</h3><ul><li>toLowerCase()：将所有的字符转成小写；</li><li>toUpperCase() ：将所有的字符转成大写；</li></ul><h3 id="查找-包含" tabindex="-1"><a class="header-anchor" href="#查找-包含" aria-hidden="true">#</a> 查找,包含</h3><p><strong>查找字符串位置</strong></p><p><strong>str.indexOf(searchString)</strong></p><p><code>indexOf()</code>方法用于<strong>在字符串中查找指定字符串</strong>。如果找到指定字符串，则返回指定字符串在字符串中的位置。如果未找到指定字符串，则返回-1。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello,world!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>str.lastIndexOf(searchString)</strong></p><p><code>lastIndexOf()</code>方法用于在字符串中查找<strong>最后一个指定字符串</strong>。如果找到指定字符串，则返回指定字符串在字符串中的位置。如果未找到指定字符串，则返回-1。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;world,world!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>是否包含字符串</strong></p><p><strong>str.includes(searchString)</strong></p><p><code>includes()</code>方法用于<strong>检查字符串是否包含指定字符串</strong>。如果包含指定字符串，则返回<code>true</code>，否则返回<code>false</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="开头-结尾和替换" tabindex="-1"><a class="header-anchor" href="#开头-结尾和替换" aria-hidden="true">#</a> 开头,结尾和替换</h3><p><strong>str.startsWith(searchString)</strong></p><p><code>startsWith()</code>用于<strong>检查字符串是否以指定字符串开头</strong>。如果字符串以指定字符串开头，则返回true，否则返回false。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>str.endsWith(searchString)</strong></p><p><code>endsWith()</code>用于<strong>检查字符串是否以指定字符串结尾</strong>。如果字符串以指定字符串结尾，则返回true，否则返回false。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>str.replace(searchString, replaceString)</strong></p><p><code>replace()</code>用于<strong>在字符串中替换指定字符串</strong>。它接受两个参数：第一个参数是要被替换的子字符串，第二个参数是要替换成的新子字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;everyone&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 &quot;Hello, everyone!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="拼接-删除" tabindex="-1"><a class="header-anchor" href="#拼接-删除" aria-hidden="true">#</a> 拼接,删除</h3><p><strong>var newString = string1.concat(string2, ..., stringN);</strong></p><p><code>concat()</code> 方法<strong>用于合并两个或多个字符串</strong>。这个方法会返回一个新的字符串，它是源字符串的副本，但是其中的所有字符都被连接在一起</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str1 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&quot;World&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;HelloWorld&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>var trimmedString = string.trim();</strong></p><p><code>trim()</code> 方法用于删除字符串中前后的空格。这个方法会返回一个新的字符串，它是源字符串的副本，但是其中的前缀和后缀空格都被删除了</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;   Hello World   &quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> trimmedStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>trimmedStr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;Hello World&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="分割为数组" tabindex="-1"><a class="header-anchor" href="#分割为数组" aria-hidden="true">#</a> 分割为数组</h3><p><strong>str.split(separator)</strong></p><p><code>split()</code>方法用于<strong>将字符串分割成数组</strong>。使用指定的分隔符将字符串分割成数组，并返回数组。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello world&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回 [&quot;Hello&quot;, &quot;world&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> Object</h2><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性" aria-hidden="true">#</a> 属性</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
 <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> name <span class="token operator">=</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;张三&quot;</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">;</span> <span class="token comment">// 输出 30</span>

<span class="token comment">//方括号法可以使用变量</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输出 &quot;张三&quot;</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输出 30</span>

<span class="token comment">//删除对象中属性</span>
<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>age
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="math" tabindex="-1"><a class="header-anchor" href="#math" aria-hidden="true">#</a> Math</h2><blockquote><p>在JavaScript中，<code>Math</code> 对象提供了一系列数学函数，可以用来进行数学计算</p></blockquote><ul><li><code>Math.abs(x)</code>：返回 <code>x</code> 的绝对值</li><li><code>Math.ceil(x)</code>：返回大于等于 <code>x</code> 的最小整数。</li><li><code>Math.floor(x)</code>：返回小于等于 <code>x</code> 的最大整数</li><li><code>Math.round(x)</code>：返回四舍五入后的整数。</li><li><code>Math.pow(x, y)</code>：返回 <code>x</code> 的 <code>y</code> 次幂。</li><li><code>Math.sqrt(x)</code>：返回 <code>x</code> 的平方根。</li><li><code>Math.random()</code>：返回一个随机数，范围在 <code>0</code> 到 <code>1</code> 之间。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//取一个指定范围的随机数</span>
<span class="token keyword">var</span> min <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 指定最小值</span>
<span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token comment">// 指定最大值</span>
<span class="token keyword">var</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="date" tabindex="-1"><a class="header-anchor" href="#date" aria-hidden="true">#</a> Date</h2><h3 id="时间简述" tabindex="-1"><a class="header-anchor" href="#时间简述" aria-hidden="true">#</a> 时间简述</h3><p><strong>GMT</strong></p><p><code>GMT</code>（Greenwich Mean Time）全名是格林威治平时（也称格林威治标准时间）。这个时间系统的概念是在1884年确立。</p><p>它规定太阳每天经过位于英国伦敦郊区的皇家格林威治天文台的时间为中午12点。</p><p><code>1972</code>年之前，格林威治时间（<code>GMT</code>）一直是世界时间的标准。1972年之后，<code>GMT</code>不再是一个时间标准了。</p><blockquote><p><code>GMT</code>因为是根据地球的转动来计算时间的，而地球的自转受潮汐、地震、风速等因素的影响自转速度是不均衡的，而且自转速度也会越来越慢，所以<code>GMT</code>不够精确，就不再使用了。</p></blockquote><blockquote><p>我们常说的时间戳，<code>timestamp</code>就是指格林威治时间<code>1970年01月01日00时00分00秒</code>(北京时间<code>1970年01月01日08时00分00秒</code>)起至现在的总秒数。<code>JS</code>中出输出的<code>timestamp</code>是到毫秒级的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&#39;1970-01-01&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>

<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1644482867088</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p><strong>UTC</strong></p><p><code>UTC</code>（Coodinated Universal Time），协调世界时，又称世界统一时间、世界标准时间、国际协调时间。</p><p><code>UTC</code>是现在全球通用的时间标准，全球各地都同意将各自的时间进行同步协调。<code>UTC</code>时间是经过平均太阳时（以格林威治时间<code>GMT</code>为准）、地轴运动修正后的新时标以及以秒为单位的<code>国际原子时</code>所综合精算而成，计算过程相当严谨精密。</p><p>一般来说，当我们提到<code>UTC</code>时间而不带任何别的修饰时，常指<code>UTC 0点(UTC+0)</code>。</p><p>协调世界时（<code>UTC</code>）不与任何地区位置相关，也不代表此刻某地的时间，所以在说明某地时间时要加上时区。比如说<code>UTC + 8 = 北京时间</code>。</p><p>也就是说<code>GMT</code>并不等于<code>UTC</code>，而是等于<code>UTC+0</code>，只是格林威治刚好在<code>0</code>时区上，所以<code>GMT = UTC+0</code>。</p><p><strong>GMT VS UTC</strong></p><p><code>GMT</code>是前世界标准时，<code>UTC</code>是现世界标准时。</p><p><code>UTC</code>比<code>GMT</code>更精准，以原子时计时，适应现代社会的精确计时。</p><p>但在不需要精确到秒的情况下，二者可以视为等同。（<code>UTC</code>有闰秒，而<code>GMT</code>没有)</p><h3 id="时区" tabindex="-1"><a class="header-anchor" href="#时区" aria-hidden="true">#</a> 时区</h3><p>全球共分为<code>24</code>个标准时区，相邻时区的时间相差一个小时。(东、西各<code>12</code>个时区）。规定英国格林威治天文台为中时区（<code>零时区</code>）、<code>东1-12区</code>，<code>西1-12区</code>。每个时区横跨经度<code>15</code>度，时间正好是<code>1</code>小时。</p><blockquote><p>如果在<code>JS</code>中获取一个日期的时区，可以使用<code>Date.prototype.getTimezoneOffset()</code>。 <code>getTimezoneOffset</code>返回返回本地时间与<code>UTC</code>时间相差的分钟数。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">getTimezoneOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// -480</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="iso-8601" tabindex="-1"><a class="header-anchor" href="#iso-8601" aria-hidden="true">#</a> ISO 8601</h3><blockquote><p><code>ISO 8601</code>一种国际通用的无歧义的日期和时间格式。这个<code>ISO</code>标准能够帮助消除因不同的日期转换、文化差异、时区等的影响导致对日期时间格式理解上的偏差，他给出了一种无论对人还是机器都清晰定义的日期和时间表示形式。</p></blockquote><p><code>YYYY</code>表示四位数的年份。</p><p><code>MM</code>表示两位数的月份。</p><p><code>DD</code>表示两位数的天(day of the month)，从<code>01</code>到<code>31</code></p><p><code>T</code>是用来指示时间元素的开始字符，日期和时间合并表示时，要在时间前面加大写字母<code>T</code>。</p><p><code>hh</code>表示两位数的小时，从<code>00</code>到<code>23</code>，不包括<code>AM/PM</code>。</p><p><code>mm</code>表示两位数的分钟，从<code>00</code>到<code>59</code>。</p><p><code>ss</code>表示两位数的秒，从<code>00</code>到<code>59</code>。</p><p><code>s</code>表示一或多位数，表示秒的小数部分。</p><p><code>mmm</code>表示三位数的毫秒数，从<code>000</code>到<code>999</code>。</p><p><code>TZD</code>表示时区指示符：<code>Z</code>或<code>+hh:mm</code>或<code>-hh:mm</code>，<code>+</code>或<code>-</code>表示时区距离<code>UTC</code>(世界标准时间)时区多远。</p><ul><li><code>Z</code>表示<code>UTC</code>时间。</li><li><code>+hh:mm</code>表示比<code>UTC</code>时间快的本地时区。</li><li><code>-hh:mm</code>表示比<code>UTC</code>时间慢的本地时区。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">完整的日期加上小时、分钟、秒和小数点后一秒</span><span class="token operator">:</span>
<span class="token constant">YYYY</span><span class="token operator">-</span><span class="token constant">MM</span><span class="token operator">-</span>DDThh<span class="token operator">:</span>mm<span class="token operator">:</span>ss<span class="token punctuation">.</span><span class="token function">sTZD</span> <span class="token punctuation">(</span><span class="token number">1997</span><span class="token operator">-</span><span class="token number">07</span><span class="token operator">-</span>16T19<span class="token operator">:</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">30.45</span><span class="token operator">+</span><span class="token number">01</span><span class="token operator">:</span><span class="token number">00</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取和操作日期和时间" tabindex="-1"><a class="header-anchor" href="#获取和操作日期和时间" aria-hidden="true">#</a> 获取和操作日期和时间</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//获取当前日期和时间</span>
<span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取当前日期</span>
<span class="token keyword">var</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> year <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> month <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> day <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//获取当前时间</span>
<span class="token keyword">var</span> hours <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> minutes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//设置日期和时间</span>
<span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置为2021年1月1日</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="时间戳" tabindex="-1"><a class="header-anchor" href="#时间戳" aria-hidden="true">#</a> 时间戳</h3><ul><li>时间戳：它是一个整数值，表示自1970年1月1日00:00:00 UTC以来的毫秒数。</li><li>方式一：new Date().getTime()</li><li>方式二：new Date().valueOf()</li><li>方式三：+new Date()</li><li>方式四：Date.now()</li></ul>`,151),p=[o];function c(l,i){return s(),a("div",null,p)}const u=n(t,[["render",c],["__file","01_JSjichu.html.vue"]]);export{u as default};
