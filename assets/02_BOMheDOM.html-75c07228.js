import{_ as n,o as a,c as s,e as t}from"./app-c5b6f358.js";const e="/myblogs/assets/image-20231123161254983-0df5afb2.png",l="/myblogs/assets/image-20231123161458029-2c709558.png",i="/myblogs/assets/image-20231123161625363-fc308c8b.png",o={},p=t(`<h2 id="dom" tabindex="-1"><a class="header-anchor" href="#dom" aria-hidden="true">#</a> DOM</h2><blockquote><p>现在已基本不直接操作DOM,简单了解即可</p></blockquote><blockquote><p>DOM 即文档对象模型，是W3C制定的标准接口规范，是一种处理HTML和XML文件的标准API</p></blockquote><p>作用：让JavaScript可以对文档中的标签、属性、内容等进行 <strong>访增删改</strong> 操作。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>我是div元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>p<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>我是p元素<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;p&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建一个a元素</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 添加到body</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 移除body中的div子节点</span>
document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;我修改了div的文本内容&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="bom" tabindex="-1"><a class="header-anchor" href="#bom" aria-hidden="true">#</a> BOM</h2><p><strong>BOM：浏览器对象模型（Browser Object Model）</strong></p><ul><li>简称 BOM，由浏览器提供的用于处理文档（document）之外的所有内容的其他对象</li><li>BOM就是让JS与浏览器进行“对话”，获取浏览器信息和操作浏览器</li></ul><p><strong>BOM主要包括一下的对象模型</strong></p><ul><li>window：包括全局属性、方法，控制浏览器窗口相关的属性、方法</li><li>location：浏览器连接到的对象的位置（URL）</li><li>history：操作浏览器的历史</li><li>navigator：用户代理（浏览器）的状态和标识（很少用到）</li><li>screen：屏幕窗口信息（很少用到）</li></ul><h3 id="location对象" tabindex="-1"><a class="header-anchor" href="#location对象" aria-hidden="true">#</a> location对象</h3><p><strong>location对象用于表示window上当前链接到的URL信息</strong></p><p><strong>常见的属性有哪些</strong></p><ul><li>href: 当前window对应的超链接URL, 整个URL；</li><li>protocol: 当前的协议；</li><li>host: 主机地址；</li><li>hostname: 主机地址(不带端口)；</li><li>port: 端口；</li><li>pathname: 路径；</li><li>search: 查询字符串；</li><li>hash: 哈希值；</li></ul><p><strong>常见的方法有哪些</strong></p><ul><li>assign：赋值一个新的URL，并且跳转到该URL中</li><li>replace：打开一个新的URL，并且跳转到该URL中（不同的是不会在浏览记录中留下之前的记录）</li><li>reload：重新加载页面，可以传入一个Boolean类型</li></ul><p><strong>URLSearchParams介绍</strong></p><ul><li>URLSearchParams 定义了一些实用的方法来处理 URL 的查询字符串</li><li>可以将一个字符串转化成URLSearchParams类型</li><li>也可以将一个URLSearchParams类型转成字符串</li><li>中文会使用encodeURIComponent和decodeURIComponent进行编码和解码</li></ul><p><strong>URLSearchParams常见的方法</strong></p><ul><li>get：获取搜索参数的值；</li><li>set：设置一个搜索参数和值；</li><li>append：追加一个搜索参数和值；</li><li>has：判断是否有某个搜索参数；</li><li>https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams</li></ul><h3 id="history对象" tabindex="-1"><a class="header-anchor" href="#history对象" aria-hidden="true">#</a> history对象</h3><p><strong>history对象允许我们访问浏览器曾经的会话历史记录</strong></p><p><strong>常见属性</strong></p><ul><li>length：会话中的记录条数</li><li>state：当前保留的状态值</li></ul><p><strong>常用方法</strong></p><ul><li>back()：返回上一页，等价于history.go(-1)；</li><li>forward()：前进下一页，等价于history.go(1)；</li><li>go()：加载历史中的某一页；</li><li>pushState()：打开一个指定的地址；</li><li>replaceState()：打开一个新的地址，并且使用replace；</li></ul><h3 id="navigator对象-了解" tabindex="-1"><a class="header-anchor" href="#navigator对象-了解" aria-hidden="true">#</a> navigator对象(了解)</h3><ul><li>navigator 对象表示用户代理的状态和标识等信息。</li></ul><h3 id="screen对象-了解" tabindex="-1"><a class="header-anchor" href="#screen对象-了解" aria-hidden="true">#</a> screen对象(了解)</h3><ul><li>screen主要记录的是浏览器窗口外面的客户端显示器的信息</li><li>比如屏幕的逻辑像素 screen.width、screen.height</li></ul><h2 id="动态修改样式" tabindex="-1"><a class="header-anchor" href="#动态修改样式" aria-hidden="true">#</a> 动态修改样式</h2><h3 id="直接操作" tabindex="-1"><a class="header-anchor" href="#直接操作" aria-hidden="true">#</a> 直接操作</h3><blockquote><p>会直接覆盖整个类中的字符串</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1）操作行内样式</span>
ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">;</span>
ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize <span class="token operator">=</span> <span class="token string">&quot;30px&quot;</span><span class="token punctuation">;</span>
ele<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;gold&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 2）操作class类 </span>
ele<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&quot;active&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="classlist方法操作" tabindex="-1"><a class="header-anchor" href="#classlist方法操作" aria-hidden="true">#</a> classList方法操作</h3><blockquote><p>不会全部覆盖，更加实用</p></blockquote><ul><li>elem.classList.add (class) ：添加一个类</li><li>elem.classList.remove(class)：添加/移除类</li><li>elem.classList.toggle(class) ：如果类不存在就添加类，存在就移除它</li><li>elem.classList.contains(class)：检查给定类，返回 true/false</li></ul><h2 id="js操作盒子模型" tabindex="-1"><a class="header-anchor" href="#js操作盒子模型" aria-hidden="true">#</a> js操作盒子模型</h2><h3 id="元素偏移量offset系列" tabindex="-1"><a class="header-anchor" href="#元素偏移量offset系列" aria-hidden="true">#</a> 元素偏移量offset系列</h3><blockquote><p>offset系列相关属性可以动态地获取该元素的位置(偏移)、大小等</p></blockquote><ul><li>获取元素距离带定位父元素的位置</li><li>获得元素自身的宽度高度大小(<strong>注：返回的数值都不带单位</strong>)</li></ul><p><img src="`+e+'" alt="image-20231123161254983"></p><p>offset系列常用属性：</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>element.offsetParent</td><td>返回该元素<strong>带有定位的父级元素</strong>，如果父级元素没有定位则返回body</td></tr><tr><td>element.offsetTop</td><td>返回该元素<strong>上外边框相对带有定位的父级元素上内边框的偏移</strong>，如果父级元素没有定位则返回相对body上方的偏移</td></tr><tr><td>element.offsetLeft</td><td>返回该元素<strong>左外边框相对带有定位的父级元素左内边框的偏移</strong>，如果父级元素没有定位则返回相对body左侧的偏移</td></tr><tr><td>element.offsetWidth</td><td>返回该元素包括<strong>padding+border+content</strong>的宽度</td></tr><tr><td>element.offsetHeight</td><td>返回该元素包括<strong>padding+border+content</strong>的高度</td></tr></tbody></table><p><strong>注：</strong> 1.如果存在垂直滚动条，<strong>offsetWidth叶包括垂直滚动条的宽度</strong>；如果存在水平滚动条，<strong>offsetHeight也包括水平滚动条的高度</strong> 2.当需要获得某个元素在页面上的偏移量，将这个元素的<strong>offsetLeft</strong>和<strong>offsetTop</strong>和该元素的<strong>offsetParent的相同属性</strong>相加，再加上<strong>offsetParent的相应方向的边框值</strong>，如此循环到根元素，就可获得</p><h3 id="offset和style的区别" tabindex="-1"><a class="header-anchor" href="#offset和style的区别" aria-hidden="true">#</a> offset和style的区别</h3><table><thead><tr><th>offset</th><th>style</th></tr></thead><tbody><tr><td>offset可以得到任意样式表中的样式值</td><td>style只能得到行内样式表中的样式值</td></tr><tr><td>offset系列获得的数值是没有单位的</td><td>style.width得到的值是带有单位的字符串</td></tr><tr><td>offsetWidth包含padding+border+width</td><td>style.width得到的值不包含padding+border</td></tr><tr><td>offsetWidth是只读属性</td><td>style.width可读写</td></tr><tr><td><strong>想要获取元素大小位置，用offset更合适</strong></td><td><strong>想要给元素更改值，则需要用style</strong></td></tr></tbody></table><h3 id="元素可视区client系列" tabindex="-1"><a class="header-anchor" href="#元素可视区client系列" aria-hidden="true">#</a> 元素可视区client系列</h3><blockquote><p>通过client相关的属性可以动态地得到该元素的边框大小，元素大小等，不带单位</p></blockquote><p><img src="'+l+'" alt="image-20231123161458029"></p><p>属性作用element.clientTop返回该元素<strong>上边框大小</strong>element.clientLeft返回该元素<strong>左边框大小</strong>element.clientWidth返回该元素包括<strong>padding+content</strong>的宽度，不含边框element.clientHeight返回该元素包括<strong>padding+content</strong>的高度，不含边框</p><h3 id="元素滚动scroll系列" tabindex="-1"><a class="header-anchor" href="#元素滚动scroll系列" aria-hidden="true">#</a> 元素滚动scroll系列</h3><blockquote><p>使用scroll系列相关属性可以动态获得该元素的大小、滚动距离等，不带单位</p></blockquote><p><img src="'+i+`" alt="image-20231123161625363"></p><p>属性作用element.scrollTop返回<strong>被卷去的上侧距离</strong>，从内容顶部到上内边框element.scrollLeft返回<strong>被卷去的左侧距离</strong>element.scrollWidth返回该元素<strong>自身实际的宽度</strong>，不含边框element.scrollHeight返回该元素<strong>自身实际的高度</strong>，不含边框.</p><h2 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理" aria-hidden="true">#</a> 事件处理</h2><p><strong>事件 + 事件的反馈 = 前端交互（前端的核心）</strong></p><h3 id="鼠标事件" tabindex="-1"><a class="header-anchor" href="#鼠标事件" aria-hidden="true">#</a> 鼠标事件</h3><ul><li>onclick 点击事件 = onmousedown + onmouseup</li><li>ondbclick 双击事件</li><li>onmousedown 鼠标按下去</li><li>onmouseup 鼠标抬起来</li><li>onmouseover 鼠标移到某元素上面</li><li>onmouseout 鼠标离开某元素上面</li><li>onmousemove 鼠标在元素上面的移动</li></ul><h3 id="键盘事件" tabindex="-1"><a class="header-anchor" href="#键盘事件" aria-hidden="true">#</a> 键盘事件</h3><ul><li>onkeydown 键盘按下去</li><li>onkeyup 键盘抬起来</li><li>onkeypress 键盘抬住</li></ul><p>事件的执行顺序是 onkeydown、onkeypress、onkeyup</p><ul><li>down事件先发生</li><li>press发生在文本被输入</li><li>up发生在文本输入完成</li></ul><h3 id="加载事件" tabindex="-1"><a class="header-anchor" href="#加载事件" aria-hidden="true">#</a> 加载事件</h3><ul><li>load 加载 浏览器不仅加载完成了 HTML，还加载完成了所有外部资源 事件源是window</li><li>unload 加载 退出页面 此事件不好捕获到 也没有什么用</li><li>DOMContentLoaded：浏览器已完全加载 HTML，并构建了 DOM 树，但像 img 和样式表之类的外部资源可能尚未加载 完成。</li></ul><h3 id="表单事件" tabindex="-1"><a class="header-anchor" href="#表单事件" aria-hidden="true">#</a> 表单事件</h3><ul><li>focus: 获取焦点</li><li>blur: 失去焦点</li><li>change: 改变输入框中的内容，并失去焦点时触发</li><li>input：内部发生变化，立即触发，不等到失去焦点</li><li>submit: 当点击了提交按钮，会触发submit事件</li><li>reset: 当点击了重置按钮，会触发reset事件</li></ul><h3 id="其它事件" tabindex="-1"><a class="header-anchor" href="#其它事件" aria-hidden="true">#</a> 其它事件</h3><ul><li>resize: 改变了浏览器窗口大小时，会触发resize事件</li><li>scroll: 页面滚动时，会触发scroll事件</li></ul><h3 id="事件绑定" tabindex="-1"><a class="header-anchor" href="#事件绑定" aria-hidden="true">#</a> 事件绑定</h3><h4 id="标签上直接绑定" tabindex="-1"><a class="header-anchor" href="#标签上直接绑定" aria-hidden="true">#</a> 标签上直接绑定</h4><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="属性上绑定" tabindex="-1"><a class="header-anchor" href="#属性上绑定" aria-hidden="true">#</a> 属性上绑定</h4><blockquote><p>绑定多次，后面的会覆盖前面的</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//解绑</span>
btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="addeventlistener" tabindex="-1"><a class="header-anchor" href="#addeventlistener" aria-hidden="true">#</a> addEventListener</h4><blockquote><p>可以多次绑定，不会覆盖</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>et btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//解绑</span>
btn<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> fn<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="事件冒泡和事件捕获" tabindex="-1"><a class="header-anchor" href="#事件冒泡和事件捕获" aria-hidden="true">#</a> 事件冒泡和事件捕获</h3><ul><li>我们会发现默认情况下事件是从最内层的span向外依次传递的顺序，这个顺序我们称之为事件冒泡（Event Bubble）</li><li>另外一种监听事件流的方式就是从外层到内层（body -&gt; span），这种称之为事件捕获（Event Capture）</li></ul><p><strong>如果我们都监听，那么会按照如下顺序来执行：</strong></p><ul><li>捕获阶段（Capturing phase）：事件（从 Window）向下走近元素</li><li>目标阶段（Target phase）：事件到达目标元素</li><li>冒泡阶段（Bubbling phase）：事件从元素上开始冒泡</li></ul><h3 id="事件对象" tabindex="-1"><a class="header-anchor" href="#事件对象" aria-hidden="true">#</a> 事件对象</h3><p><strong>当一个事件发生时，就会有和这个事件相关的很多信息：</strong></p><ul><li>比如事件的类型是什么，你点击的是哪一个元素，点击的位置是哪里等等相关的信息</li><li>那么这些信息会被封装到一个Event对象中，这个对象由浏览器创建，称之为event对象；</li><li>该对象给我们提供了想要的一些属性，以及可以通过该对象进行某些操作；</li></ul><p><strong>如何获取这个event对象呢？</strong></p><ul><li>event对象会在传入的事件处理（event handler）函数回调时，被系统传入；</li><li>我们可以在回调函数中拿到这个event对象；</li></ul><p><strong>常见的属性：</strong></p><ul><li>type：事件的类型；</li><li>target：当前事件发生的元素；</li><li>currentTarget：当前处理事件的元素；</li><li>eventPhase：事件所处的阶段；</li><li>offsetX、offsetY：事件发生在元素内的位置；</li><li>clientX、clientY：事件发生在客户端内的位置；</li><li>pageX、pageY：事件发生在客户端相对于document的位置；</li><li>screenX、screenY：事件发生相对于屏幕的位置；</li></ul><p><strong>常见的方法：</strong></p><ul><li>preventDefault：取消事件的默认行为；</li><li>stopPropagation：阻止事件的进一步传递（冒泡或者捕获都可以阻止）；</li></ul><h3 id="事件处理中的this" tabindex="-1"><a class="header-anchor" href="#事件处理中的this" aria-hidden="true">#</a> 事件处理中的this</h3><p><strong>在函数中，我们也可以通过this来获取当前的发生元素：</strong></p><ul><li>在浏览器内部，调用event handler是绑定到当前的事件源上的</li></ul><h3 id="事件委托-event-delegation" tabindex="-1"><a class="header-anchor" href="#事件委托-event-delegation" aria-hidden="true">#</a> 事件委托（event delegation）</h3><p><strong>事件冒泡在某种情况下可以帮助我们实现强大的事件处理模式 – 事件委托模式（也是一种设计模式）</strong></p><ul><li>当子元素被点击时，父元素可以通过冒泡可以监听到子元素的点击；</li><li>可以通过event.target获取到当前监听的元素</li></ul>`,101),c=[p];function r(d,u){return a(),s("div",null,c)}const g=n(o,[["render",r],["__file","02_BOMheDOM.html.vue"]]);export{g as default};
